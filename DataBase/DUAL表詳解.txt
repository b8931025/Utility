ORACLE DUAL表詳解


ORACLE DUAL表詳解 

1、DUAL表的用途
Dual 是 Oracle中的一個實際存在的表，任何用戶均可讀取，常用在沒有目標表的Select語句塊中 
--查看當前連接用戶
SQL> select user from dual;
USER
------------------------------
SYSTEM 
--查看當前日期、時間
SQL> select sysdate from dual;
SYSDATE
-----------
2007-1-24 1 
SQL> select to_char(sysdate,'yyyy-mm-dd hh24:mi:ss') from dual;
TO_CHAR(SYSDATE,'YYYY-MM-DDHH2
------------------------------
2007-01-24 15:02:47 
--查看當前數據庫的字符集： 
SQL> select userenv('language') from dual; 
USERENV('LANGUAGE')
----------------------------------------------------
SIMPLIFIED CHINESE_CHINA.ZHS16GBK 
--當作計算器用
SQL> select 1+2 from dual;
       1+2
----------
         3 
--查看序列值
SQL> create sequence aaa increment by 1 start with 1;
SQL> select aaa.nextval from dual;
          NEXTVAL
----------
         1 
SQL> select aaa.currval from dual;
   CURRVAL
----------
         1 

2、關於DUAL表的測試與分析
DUAL就是個一行一列的表，如果你往裡執行insert、delete、truncate操作，就會導致很多程序出問題。結果也因sql*plus、pl/sql dev等工具而異。 
--查看DUAL是什麼OBJECT
--DUAL是屬於SYS schema的一個表,然後以PUBLIC SYNONYM的方式供其他數據庫USER使用.
SQL> select owner, object_name , object_type from dba_objects where object_name like '%DUAL%';
OWNER      OBJECT_NAME       OBJECT_TYPE
---------- ----------------- ------------------
SYS        DUAL              TABLE
PUBLIC     DUAL              SYNONYM 

--查看表結構，只有一個字段DUMMY，為VARCHAR2(1)型
SQL> desc dual
Name  Type        Nullable Default Comments 
----- ----------- -------- ------- -------- 
DUMMY VARCHAR2(1) Y 

--DUAL表的結構：
create table SYS.DUAL
(
  DUMMY VARCHAR2(1)
)
tablespace SYSTEM
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    next 16K
    minextents 1
    maxextents 505
    pctincrease 50
  ); 

/*
很是困惑，ORACLE為什麼要用VARCHAR(1)型，用CHAR(1)難道不好麼？從這樣的表結構來看，DUAL表設計的目的就是要盡可能的簡單，以減少檢索的開銷。
還有，DUAL表是建立在SYSTEM表空間的，第一是因為DUAL表是SYS這個用戶建的，本來默認的表空間就是SYSTEM；第二，把這個可能經常被查詢的表和用戶表分開來存放，對於系統性能的是有好處的。 
有了創建了表、創建了同義詞還是不夠的。DUAL在SYS這個Schema下面，因此用別的用戶登錄是無法查詢這個表的，因此還需要授權：
grant select on SYS.DUAL to PUBLIC with grant option;
將Select 權限授予公眾。 
接下來看看DUAL表中的數據，事實上，DUAL表中的數據和ORACLE數據庫環境有著十分重要的關係（ORACLE不會為此癱瘓，但是不少存儲過程以及一些查詢將無法被正確執行）。
*/ 

--查詢行數
--在創建數據庫之後，DUAL表中便已經被插入了一條記錄。個人認為：DUMMY字段的值並沒有什麼關係，重要的是DUAL表中的記錄數
SQL> select count(*) from dual;
  COUNT(*)
----------
         1
         
SQL> select * from dual;
DUMMY
-----
X 

--插入數據，再查詢記錄，只返回一行記錄
SQL> insert into dual values ('Y');
1 row created. 
SQL> commit;
Commit complete. 
SQL> insert into dual values ('X');
1 row created. 
SQL> insert into dual values ('Z');
1 row created. 
SQL> commit;
Commit complete. 
SQL> select count(*) from dual;
COUNT(*)
----------
4 
SQL> select * from dual;
DUMMY
-----
X 

/*
--假我們插入一條數據，DUAL表不是返回一行，而是多行記錄，那會是什麼結果呢？
SQL> insert into dual values('Y');
1 行 已插入 
SQL> commit;
提交完成 
SQL> select * from dual;
DUMMY
-----
X
Y
SQL> select sysdate from dual;
SYSDATE
-----------
2004-12-15
2004-12-15 

這個時候返回的是兩條記錄，這樣同樣會引起問題。在通過使用
select sysdate into v_sysdate from dual;
來獲取時間或者其他信息的存儲過程來說，ORACLE會拋出TOO_MANY_ROWS(ORA-01422)異常。
因此，需要保證在DUAL表內有且僅有一條記錄。當然，也不能把DUAL表的UPDATE，INSERT，DELETE權限隨意釋放出去，這樣對於系統是很危險的
*/ 

--把表截掉
SQL> truncate table dual;
Table truncated. 
SQL> select count(*) from dual;
COUNT(*)
----------
0 
SQL> select * from dual;
no rows selected 
SQL> select sysdate from dual;
no rows selected 

--試著把DUAL表中的數據刪除，看看會出現什麼結果：
SQL> delete from dual;
1 行 已刪除 
SQL> select * from dual;
DUMMY
----- 
SQL> select sysdate from dual;
SYSDATE
----------- 
/*
我們便取不到系統日期了。因為，sysdate是個函數，作用於每一個數據行。現在沒有數據了，自然就不可能取出系統日期。
這個對於很多用
select sysdate into v_sysdate from dual;
這種方式取系統時間以及其他信息的存儲過程來說是致命的，因為，ORACLE會馬上拋出一個NO_DATA_FOUND（ORA-01403）的異常，即使異常被捕獲，存儲過程也將無法正確完成要求的動作。
*/ 

--對於DELETE操作來說，ORACLE對DUAL表的操作做了一些內部處理,盡量保證DUAL表中只返回一條記錄.當然這寫內部操作是不可見的
--不管表內有多少記錄（沒有記錄除外）,ORACLE對於每次DELETE操作都只刪除了一條數據。
SQL> select count(*) from dual;
COUNT(*)
----------
2 
SQL> delete from dual;
1 行 已刪除 
SQL> commit;
提交完成 
SQL> select count(*) from dual;
COUNT(*)
----------
1 

/*
附: ORACLE關於DUAL表不同尋常特性的解釋 
There is internalized code that makes this happen. Code checks that ensurethat a table scan of SYS.DUAL only returns one row. Svrmgrl behaviour is incorrect but this is now an obsolete product.
The base issue you should always remember and keep is: DUAL table should always have 1 ROW. Dual is a normal table with one dummy column of varchar2(1).
This is basically used from several applications as a pseudo table for getting results from a select statement that use functions like sysdate or other
prebuilt or application functions. If DUAL has no rows at all some applications (that use DUAL) may fail with NO_DATA_FOUND exception. If DUAL has more than 1 row then applications (that use DUAL) may fail with TOO_MANY_ROWS exception.
So DUAL should ALWAYS have 1 and only 1 row 
*/ 

DUAL表可以執行插入、更新、刪除操作，還可以執行drop操作。但是不要去執行drop表的操作，否則會使系統不能用，數據庫起不了，會報Database startup crashes with ORA-1092錯誤。 

3、如果DUAL表被「不幸」刪除後的恢復：
用sys用戶登陸。
創建DUAL表。
授予公眾SELECT權限（SQL如上述，但不要給UPDATE，INSERT，DELETE權限）。
向DUAL表插入一條記錄（僅此一條）： insert into dual values('X');
提交修改。 
--用sys用戶登陸。
SQL> create pfile=’d:\pfile.bak』 from spfile
SQL> shutdown immediate 
--在d:\pfile.bak文件中最後加入一條：replication_dependency_tracking = FALSE
--重新啟動數據庫：
SQL> startup pfile=’d:\pfile.bak』
SQL> create table 「sys」.」DUAL」
     ( 「DUMMY」 varchar2(1) )
     pctfree 10 pctused 4;
SQL> insert into dual values(『X』);
SQL> commit;
SQL> Grant select on dual to Public;
授權成功。
 
SQL> select * from dual;
D
-
X
 
SQL> shutdown immediate
數據庫已經關閉。
已經卸載數據庫。
ORACLE 例程已經關閉。
SQL> startup
ORACLE 例程已經啟動。
 
Total System Global Area 135338868 bytes
Fixed Size                   453492 bytes
Variable Size             109051904 bytes
Database Buffers           25165824 bytes
Redo Buffers                 667648 bytes
數據庫裝載完畢。
數據庫已經打開。
SQL>
文章出?：http://www.diybl.com/course/7_databases/oracle/Oracleshl/2008717/133562.html