<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<title>石頭閒語:Regular Expression (RegExp) in JavaScript - 樂多日誌</title>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<link rel="stylesheet" href="http://blog.roodo.com/rocksaying/site.css" type="text/css">
			<link rel="stylesheet" href="http://static.roodo.com/blog/output.css" type="text/css">
				<link rel="alternate" type="application/rss+xml" title="RSS" href="http://blog.roodo.com/rocksaying/index.rdf">
					<link rel="alternate" type="application/atom+xml" title="Atom" href="http://blog.roodo.com/rocksaying/atom.xml">
						<link rel="meta" type="application/rdf+xml" title="FOAF" href="http://blog.roodo.com/rocksaying/foaf.rdf">
							<script language="JavaScript">
<!--
var HOST = 'blog.roodo.com';
var PATH = '/rocksaying';

// Copyright (c) 1996-1997 Athenia Associates.
// http://www.webreference.com/js/
// License is granted if and only if this entire
// copyright notice is included. By Tomer Shiran.

function setCookie (name, value, expires, path, domain, secure) {
    var curCookie = name + "=" + escape(value) + (expires ? "; expires=" + expires.toGMTString() : "") + (path ? "; path=" + path : "") + (domain ? "; domain=" + domain : "") + (secure ? "secure" : "");
    document.cookie = curCookie;
}

function getCookie (name) {
    var prefix = name + '=';
    var c = document.cookie;
    var nullstring = '';
    var cookieStartIndex = c.indexOf(prefix);
    if (cookieStartIndex == -1)
        return nullstring;
    var cookieEndIndex = c.indexOf(";", cookieStartIndex + prefix.length);
    if (cookieEndIndex == -1)
        cookieEndIndex = c.length;
    return unescape(c.substring(cookieStartIndex + prefix.length, cookieEndIndex));
}

function deleteCookie (name, path, domain) {
    if (getCookie(name))
        document.cookie = name + "=" + ((path) ? "; path=" + path : "") + ((domain) ? "; domain=" + domain : "") + "; expires=Thu, 01-Jan-70 00:00:01 GMT";
}

function fixDate (date) {
    var base = new Date(0);
    var skew = base.getTime();
    if (skew > 0)
        date.setTime(date.getTime() - skew);
}

function setCommentAuthor(f) {
	  if(f.myicon != undefined)
        setCookie("myicon", f.myicon.checked, now, PATH, HOST, '');
    if(f.bake != undefined)
        setCookie("bake", f.bake.checked, now, PATH, HOST, '');
    if(!f.bake.checked) {
         deleteCookie("author", PATH, HOST);
         deleteCookie("email", PATH, HOST);
         deleteCookie("url", PATH, HOST);
         return true;
    }
    var now = new Date();
    fixDate(now);
    now.setTime(now.getTime() + 30 * 24 * 60 * 60 * 1000);
    if(f.author != undefined)
        setCookie("author", f.author.value, now, PATH, HOST, '');
    if(f.email != undefined)
        setCookie("email", f.email.value, now, PATH, HOST, '');
    if(f.url != undefined)
        setCookie("url", f.url.value, now, PATH, HOST, '');
}

function removeCommentAuthor(f) {
    deleteCookie("author", PATH, HOST);
    deleteCookie("email", PATH, HOST);
    deleteCookie("url", PATH, HOST);
    deleteCookie("myicon", PATH, HOST);
    deleteCookie("bake", PATH, HOST);
    f.author.value = '';
    f.email.value = '';
    f.url.value = '';
    f.myicon.value = '';
    f.bake.value = '';
}

function CopyText(text2copy) 
{
  if (window.clipboardData) 
  {   
    window.clipboardData.setData("Text",text2copy);   
    alert('該文章引用網址已複製到系統剪貼簿。');
  } else {   
  	var flashcopier = 'flashcopier';
    if(!document.getElementById(flashcopier)) 
    {
   		var divholder = document.createElement('div');
      divholder.id = flashcopier;
    	document.body.appendChild(divholder);
  	}
		document.getElementById(flashcopier).innerHTML = '';
	  var divinfo = '<embed src="http://blog.roodo.com/_img/clipboard.swf" FlashVars="clipboard='+escape(text2copy)+'" width="0" height="0" type="application/x-shockwave-flash"></embed>';//?里是??
	  document.getElementById(flashcopier).innerHTML = divinfo;
	  alert('該文章引用網址已複製到系統剪貼簿。');
  }
}

function calcHeight(the_iframe){
var iframeElement = document.getElementById(the_iframe);
if (document.all) {
//ie
iframeElement.style.height =iframeElement.contentWindow.document.body.scrollHeight+ 'px';}
else{
//ff
iframeElement.style.height = iframeElement.contentDocument.height + 'px';
}
}
-->
							</script>
	</head>
	<body>
		<!-- HEADER -->
		<a name="top"></a>
		<div id="container">
			<div id="banner">
				<h1 class="blogtitle">Regular Expression (RegExp) in JavaScript</h1>
			</div>
			<div class="blog">
				<div class="blogbody">
					<div class="main">
						<p>
							Regular Expression (以下簡稱 REGEX) 是以一組特定字元符號描述字串樣式規則的記述語法。簡單地說， REGEX 
							用於表達字元符號在字串中出現的規則。舉個例子說明，在 REGEX 中，字元 '^' 放在第一個位置表示字串開頭位置，當我寫下 <code>^A</code> 的記述時，便表示必須是一個開頭為
							<code>A</code> 的字串，如 <var>Adam</var>，才符合此一規則。這個表達規則通常稱為 pattern 。 
							ECMAScript/JavaScript 以內建的 RegExp Object 提供 REGEX 功能。<cite>See also: ECMA-262 15.10 
								- RegExp Objects</cite>
						</p>
						<div></div>
						<br clear="all">
					</div>
					<a name="more"></a>
					<div class="main"><p>
							要產生一個 RegExp 個體有兩種方式。第一種是直接以斜線 (<code>/</code>) 包住 pattern ，例如 <code>/^A/</code>
							。注意不要再用單引號或雙引號包在斜線外圍，一但用了引號圍住，就只是一個 String 而非 RegExp 個體。 <code>"/^A/"</code> 就是錯誤寫法，這只是一個普通字串。第二種是向系統要求建立一個 
							RegExp 個體，即 <code>new RegExp(pattern)</code> ，引數 pattern 可以是一個字串也可以是另一個 RegExp 
							個體。第一種方法只能使用常值的 pattern ，我們不能用斜線包住一個變數或一個字串運算結果。如果 pattern 保存在變數之中，則必須使用第二種方式。
						</p>
						<p>
							RegExp 個體提供兩個主要行為，即 exec() 和 test() 。 exec() 會對引數字串進行比對運算，並將匹配的字串內容記錄在陣列中回傳。而 
							test() 則僅僅測試引數字串是否符合規則，只回傳 <code>true</code> 或 <code>false</code> 。此外，RegExp 
							個體也可以作為 String 個體的 <code>match(), search(), replace(), split()</code> 之引數。 
							String 的 <code>match()</code> 其實就是調用 RegExp 的 <code>exec()</code> ，兩者的結果相同。
						</p>
						<p>
							ECMAScript/JavaScript 的 REGEX 規則是以 Perl 的規則為範本 (PHP 中稱為 PCRE 的內容) 
							，本文僅簡短說明幾個常見的字元意義。想了解更多用法者，請參看 Perl/PHP 的相關書籍，以及 ECMA-262 15.10 的內容。
						</p>
						<ol>
							<li>
								<code>^</code><br>
							寫在 pattern 第一個位置時，表示其後一符號必須出現在字串開頭的位置。寫在 pattern 中間位置時則為否定之意，表示字串中不可有 ^ 
							之後一符號的內容。
							<li>
								<code style="FONT-SIZE:large">$</code><br>
							寫在 pattern 最後一個位置時，表示其前一符號必須出現在字串尾端的位置。寫在 pattern 中時無特別意義。
							<li>
								<code style="FONT-SIZE:large">*</code><br>
							表示字串中有 0 到無數個其前一符號的內容。
							<li>
								<code style="FONT-SIZE:large">+</code><br>
							表示字串中有 1 到無數個其前一符號的內容。
							<li>
								<code style="FONT-SIZE:large">?</code><br>
							表示字串中有 0 到 1個其前一符號的內容。
							<li>
								<code style="FONT-SIZE:large">{ }</code><br>
								表示前一符號在字串中的重覆次數。例如 <code>/A{2}/</code> 表示 'A' 重覆兩次 (即 'AA') ；<code>/A{2,}/</code>
								表示字串含有 2 到無數多個 'A' ；<code>/A{2,5}/</code>
							表示含有 2 到 5 個 'A' 。
							<li>
								<code style="FONT-SIZE:large">.</code><br>
							表示一個任意字元。
							<li>
								<code style="FONT-SIZE:large">[ ]</code><br>
								表示字串含有括號中任一字元的內容。可以 <code>-</code> 表示一組連續字元，例如 <code>/[a-z]/, /[0-9]/</code> 。注意， 
								[] 僅代表一個字元，例如 <code>/[abc]/</code>
							表示 'a' 或 'b' 或 'c' ，而不是 'abc' 。
							<li>
								<code style="FONT-SIZE:large">( )</code><br>
								表示一個 sub pattern ，符合 sub pattern 的字串內容會被存放在匹配陣列中，並依序指派數字代表此 sub pattern 。可以此數字在 
								pattern 的其他地方引用內容，例如 <code>/The h([0-9]) means Title (\1)/</code>
							表示第 1 個 sub pattern 是 0 到 9 的任一字元，而 \1 表示匹配的內容。故 'The h1 means Title 1', 'The 
							h2 means Title 2' 到 'The h9 means Title 9' 符合規則。
							<li>
								<code style="FONT-SIZE:large">\</code><br>
								表示轉義 (escaping) ，將其後的字元視為一般字元。例如要表示字串中含有 '/' 字元時，就必須寫作 <code>/\//</code>
							。
							<li>
								<code style="FONT-SIZE:large">|</code><br>
								「或」意，字串中含有 '|' 之前一符號或後一符號的內容。例如 <code>/image\.(jpg|png)/</code>
							表示 'image.jpg' 或 'image.png' 。通常會用 () 括住 '|' 的前後符號。
							<li>
								<code style="FONT-SIZE:large">\d</code><br>
							表示任何一個數字，意同 [0-9] 。
							<li>
								<code style="FONT-SIZE:large">\D</code><br>
							表示任何一個非數字，意同 [^0-9] 。
							<li>
								<code style="FONT-SIZE:large">\w</code><br>
							表示任何一個字元與數字以及 '_' ，意同 [a-zA-Z0-9_] 。
							<li>
								<code style="FONT-SIZE:large">\W</code><br>
							表示任何一個 \w 以外的字元。
							<li>
								<code style="FONT-SIZE:large">\s</code><br>
							表示任何一個空白符號，包括 \t, \v 等。
							<li>
								<code style="FONT-SIZE:large">\S</code><br>
								表示任何一個非空白符號。
							</li>
						</ol>
						<h3>Example 1.</h3>
						<textarea name="code" class="javascript" cols="70">
/\d{4}-\d{2}-\d{2}/.test('2007-01-25');     // true
'2007-01-25'.match(/\d{4}-\d{2}-\d{2}/);    // true

var datePart = '2007-01-25'.match(/(\d{4})-(\d{2})-(\d{2})/);
// datePart is ['2007-01-25', '2007', '01', '25']

var emailPart = /^(\w+)@([\w.]+)/.exec('rock@example.com');
// emailPart = ['rock@example.com', 'rock', 'example.com']

var words = 'How are you doing, john?'.split(/[\s,\?\.]+/);
// words = ['How', 'are', 'you', 'doing', 'john', '']
						</textarea>
						<h3>Example 2. 一個簡單的 REGEX 測試工具，可以立即回應輸入的字串與 pattern 是否相符</h3>
						<script type="text/javascript">
function r_test(regex, s) {
    var p = document.getElementById('2070695_r_test');
    var result = document.createTextNode(
        regex.test(s)
            ? 'Match!'
            : 'Not match!'
    );
    p.replaceChild(result, p.lastChild);
}

function r_exec(regex, s) {
    var p = document.getElementById('2070695_r_exec');
    var matches = regex.exec(s);
    var result = document.createTextNode(
        matches
            ? matches.toString()
            : 'Not match!'
    );
    p.replaceChild(result, p.lastChild);
}

function s_split(regex, s) {
    var p = document.getElementById('2070695_s_split');
    var splits = s.split(regex);
    var result = document.createTextNode(
        splits
            ? splits.toString()
            : 'Not match!'
    );
    p.replaceChild(result, p.lastChild);
}

function regexp_match() {
    var p = document.getElementById('2070695_regex');

    var inputString = document.getElementById('2070695_inputString').value;
    var patternString = document.getElementById('2070695_patternString').value;
    var regexFlags = document.getElementsByName('2070695_regexFlags');
    var flags = '';
    for (i = regexFlags.length - 1; i >= 0; --i) {
        if (regexFlags[i].checked) {
            flags += regexFlags[i].value;
        }
    }

    var regex = new RegExp(patternString, flags);
    p.replaceChild(document.createTextNode(regex.toString()), p.lastChild);

    r_test(regex, inputString);
    r_exec(regex, inputString);
    s_split(regex, inputString);
}
						</script>
						<span style="FONT-SIZE: large">
							<fieldset>
								<legend>REGEX test form</legend>
								<p>
									<label for="2070695_inputString">String "</label><input id="2070695_inputString" type="text" value="Abc" size="40" style="BORDER-TOP-WIDTH:0px;BORDER-LEFT-WIDTH:0px;BORDER-BOTTOM-WIDTH:0px;BACKGROUND-COLOR:#99ffff;BORDER-RIGHT-WIDTH:0px">"
									<br>
									此輸入框中輸入字串
								</p>
								<p>
									<label for="2070695_patternString">Pattern /</label><input id="2070695_patternString" type="text" value="[a-z]+" size="40" style="BORDER-TOP-WIDTH:0px;BORDER-LEFT-WIDTH:0px;BORDER-BOTTOM-WIDTH:0px;BACKGROUND-COLOR:#99ffff;BORDER-RIGHT-WIDTH:0px">/
									<br>
									此輸入框中輸入 REGEX 內容。前後不用加 (/)。
								</p>
								<p>
									<label><input name="2070695_regexFlags" type="checkbox" value="i">ignoreCase</label>
									|
									<label><input name="2070695_regexFlags" type="checkbox" value="g">global</label>
								</p>
								<p>
									<button type="button" onclick="regexp_match();">Match</button>
								</p>
								<p id="2070695_regex"><label>Regular Expression: </label>&nbsp;</p>
								<p id="2070695_r_test"><label>test: </label>&nbsp;</p>
								<p id="2070695_r_exec"><label>exec/match: </label>&nbsp;</p>
								<p id="2070695_s_split"><label>split: </label>&nbsp;</p>
							</fieldset>
						</span><TEXTAREA class="javascript" name="code" cols="70">&lt;script type="text/javascript"&gt;
function r_test(regex, s) {
    var p = document.getElementById('r_test');
    var result = document.createTextNode(
        regex.test(s)
            ? 'Match!'
            : 'Not match!'
    );
    p.replaceChild(result, p.lastChild);
}

function r_exec(regex, s) {
    var p = document.getElementById('r_exec');
    var matches = regex.exec(s);
    var result = document.createTextNode(
        matches
            ? matches.toString()
            : 'Not match!'
    );
    p.replaceChild(result, p.lastChild);
}

function s_split(regex, s) {
    var p = document.getElementById('s_split');
    var splits = s.split(regex);
    var result = document.createTextNode(
        splits
            ? splits.toString()
            : 'Not match!'
    );
    p.replaceChild(result, p.lastChild);
}

function regexp_match() {
    var p = document.getElementById('regex');

    var inputString = document.getElementById('inputString').value;
    var patternString = document.getElementById('patternString').value;
    var regexFlags = document.getElementsByName('regexFlags');
    var flags = '';
    for (i = regexFlags.length - 1; i &gt;= 0; --i) {
        if (regexFlags[i].checked) {
            flags += regexFlags[i].value;
        }
    }

    var regex = new RegExp(patternString, flags);
    p.replaceChild(document.createTextNode(regex.toString()), p.lastChild);

    r_test(regex, inputString);
    r_exec(regex, inputString);
    s_split(regex, inputString);
}
&lt;/script&gt;
						</TEXTAREA>
						<div></div>
					</div>
				</div>
			</div>
		</div>
	</body>
</html>
